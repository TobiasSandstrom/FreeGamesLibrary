@page "/library"
@using FreeGamesLibrary.Data.Misc
@using FreeGamesLibrary.Data.Models
@using FreeGamesLibrary.Store.CounterState
@using FreeGamesLibrary.Store;
@using FreeGamesLibrary.Store.UiUseState
@rendermode InteractiveServer
@inherits Fluxor.Blazor.Web.Components.FluxorComponent
@inject IState<UiState> UiState
@inject IDispatcher dispatcher
@inject NavigationManager NavigationManager;
<PageTitle>Library</PageTitle>


@* TODO: Det behövs en bättre header header*@
<div Class="library-banner">

    <MudContainer Class="library-banner-inner-container d-flex justify-center">
        <MudContainer Class="library-banner-text-container"></MudContainer>

    </MudContainer>
</div>
<MudContainer MaxWidth="MaxWidth.ExtraLarge">
    <MudContainer Class="" MaxWidth="MaxWidth.ExtraLarge">

        <MudText Class="mb-20" Align="Align.Center" Color="Color.Primary" Typo="Typo.h2"><b>Free Game Library</b></MudText>

        <MudContainer Class="w-75 mb-10">

            <MudTextField T="string" Text="@UiState.Value.SearchWord" TextChanged="@((e)=> OnSearchChanged(e))" Class="mb-6 LibrarySearchInput" Label="Search.." Variant="Variant.Text"></MudTextField>
            <MudChip Class="mx-2"
            Style="font-size:12px;"
            T="string"
            Color="@((string.IsNullOrEmpty(UiState.Value.SelectedGenre)) ? Color.Tertiary : Color.Secondary)"
            OnClick="() => OnGenreSelected(string.Empty)">
                All
            </MudChip>
            @foreach (var genre in UiState.Value.GameGenres.ToList())
            {
                <MudChip Class="mx-2"
                Style="font-size:12px;"
                T="string"
                Color="@((UiState.Value.SelectedGenre.ToLower() == genre.ToLower()) ? Color.Tertiary : Color.Secondary)"
                OnClick="() => OnGenreSelected(genre)">
                    @genre
                </MudChip>
            }

        </MudContainer>

        <MudContainer Class="GameFilterContainer">

            <MudSelect T="GamesSortFilter" Value="UiState.Value.SortGamesBy" ValueChanged="OnFilterGamesChanged" Placeholder="Sort by..">

                <MudSelectItem Class="GameFilterItem" Value="GamesSortFilter.TitleAscending">Title (Ascending)</MudSelectItem>
                <MudSelectItem Class="GameFilterItem" Value="GamesSortFilter.TitleDescending">Title (Descending)</MudSelectItem>
                <MudSelectItem Class="GameFilterItem" Value="GamesSortFilter.PublisherAscending">Publisher (Ascending)</MudSelectItem>
                <MudSelectItem Class="GameFilterItem" Value="GamesSortFilter.PublisherDescending">Publisher (Descending)</MudSelectItem>
                <MudSelectItem Class="GameFilterItem" Value="GamesSortFilter.DeveloperAscending">Developer (Ascending)</MudSelectItem>
                <MudSelectItem Class="GameFilterItem" Value="GamesSortFilter.DeveloperDescending">Developer (Descending)</MudSelectItem>
            </MudSelect>

            <div>
                <MudIconButton OnClick="() => SetLibraryView(LibraryDisplayView.GridView)" Size="Size.Large" Color="@((UiState.Value.LibraryDisplayView == LibraryDisplayView.GridView) ? Color.Tertiary : Color.Primary)" Icon="@Icons.Material.Filled.GridView"></MudIconButton>
                <MudIconButton OnClick="() => SetLibraryView(LibraryDisplayView.ListView)" Size="Size.Large" Color="@((UiState.Value.LibraryDisplayView == LibraryDisplayView.ListView) ? Color.Tertiary : Color.Primary)" Icon="@Icons.Material.Filled.ViewList"></MudIconButton>
            </div>
        </MudContainer>
    </MudContainer>
    <MudGrid Spacing="4" Class="d-flex flex-row">
        @foreach (var game in GetGames())
        {
            if (UiState.Value.LibraryDisplayView == LibraryDisplayView.GridView)
            {
                <LibraryGridView game="@game" />
            }
            else{
                <LibraryListView game="@game" />
            }
        }
    </MudGrid>

</MudContainer>


@code {

    protected async override Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        if(UiState.Value.GamesSimple.Count <= 0){

            dispatcher.Dispatch(new GetGamesSimpleListAction());
        }
    }

    private void SetLibraryView(LibraryDisplayView view)
    {
        dispatcher.Dispatch(new SetLibraryDisplayViewAction(view));
    }

    private void OnSearchChanged(string? value)
    {        
        Console.WriteLine("1");
        dispatcher.Dispatch(new OnSearchWordChangedAction(value));

    }

    private void OnGenreSelected(string genre)
    {
        dispatcher.Dispatch(new OnSelectedGenreChangedAction(genre));
    }

    private void OnFilterGamesChanged(GamesSortFilter filter)
    {
        dispatcher.Dispatch(new SetGameFilterAction(filter));
    }

    private List<GameSimpleDisplayModel> GetGames()
    {
        switch (UiState.Value.SortGamesBy)
        {
            case Data.Misc.GamesSortFilter.TitleAscending:
                return UiState.Value.FilteredGamesSimple.OrderBy(x => x.Title).ToList();

            case Data.Misc.GamesSortFilter.TitleDescending:
                return UiState.Value.FilteredGamesSimple.OrderByDescending(x => x.Title).ToList();

            case Data.Misc.GamesSortFilter.PublisherAscending:
                return UiState.Value.FilteredGamesSimple.OrderBy(x => x.Publisher).ToList();

            case Data.Misc.GamesSortFilter.PublisherDescending:
                return UiState.Value.FilteredGamesSimple.OrderByDescending(x => x.Publisher).ToList();

            case Data.Misc.GamesSortFilter.DeveloperAscending:
                return UiState.Value.FilteredGamesSimple.OrderBy(x => x.Developer).ToList();

            case Data.Misc.GamesSortFilter.DeveloperDescending:
                return UiState.Value.FilteredGamesSimple.OrderByDescending(x => x.Developer).ToList();

            default: return new List<GameSimpleDisplayModel>();

        }
    }
}
