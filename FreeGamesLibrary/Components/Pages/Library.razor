@page "/library"
@using FreeGamesLibrary.Data.Misc
@using FreeGamesLibrary.Data.Models
@using FreeGamesLibrary.Store.CounterState
@using FreeGamesLibrary.Store;
@using FreeGamesLibrary.Store.UiUseState
@rendermode InteractiveServer
@inherits Fluxor.Blazor.Web.Components.FluxorComponent
@inject IState<UiState> UiState
@inject IDispatcher dispatcher
@inject NavigationManager NavigationManager;
<PageTitle>Library</PageTitle>


@* TODO: Det behövs en bättre header header*@
<div Class="library-banner">

    <MudContainer Class="library-banner-inner-container d-flex justify-center">
        <MudContainer Class="library-banner-text-container">

        @* <MudText Color="Color.Secondary" Typo="Typo.h2"><b>Library</b></MudText> *@

        </MudContainer>

    </MudContainer>
</div>

@* TODO:
    Börja med gridvy men senare ska det skapas så man kan toggla till listvy.
    Fixa så sökningen reagerar på knapptryck, reagerar just nu först när man togglar ut från text inputen
*@

<MudContainer MaxWidth="MaxWidth.ExtraLarge">
    <MudContainer Class="" MaxWidth="MaxWidth.ExtraLarge">

        <MudContainer Class="w-75 mb-10">

            <MudTextField T="string" Text="@UiState.Value.SearchWord" TextChanged="@((e)=> OnSearchChanged(e))" Class="mb-6 LibrarySearchInput" Label="Search.." Variant="Variant.Text"></MudTextField>
            <MudChip Class="mx-2"
            Style="font-size:12px;"
            T="string"
                     Color="@((string.IsNullOrEmpty(UiState.Value.SelectedGenre)) ? Color.Tertiary : Color.Secondary)"
                     OnClick="() => OnGenreSelected(string.Empty)">
                All
            </MudChip>
            @foreach (var genre in UiState.Value.GameGenres.ToList())
            {
                <MudChip Class="mx-2"
                Style="font-size:12px;"
                T="string"
                Color="@((UiState.Value.SelectedGenre.ToLower() == genre.ToLower()) ? Color.Tertiary : Color.Secondary)"
                OnClick="() => OnGenreSelected(genre)">
                    @genre
                </MudChip>
            }




    </MudContainer>

    <MudContainer Class="GameFilterContainer">

            <MudSelect T="GamesSortFilter" Value="UiState.Value.SortGamesBy" ValueChanged="OnFilterGamesChanged" Placeholder="Sort by..">

                <MudSelectItem Value="GamesSortFilter.TitleAscending">Title (Ascending)</MudSelectItem>
                <MudSelectItem Value="GamesSortFilter.TitleDescending">Title (Descending)</MudSelectItem>
                <MudSelectItem Value="GamesSortFilter.PublisherAscending">Publisher (Ascending)</MudSelectItem>
                <MudSelectItem Value="GamesSortFilter.PublisherDescending">Publisher (Descending)</MudSelectItem>
                <MudSelectItem Value="GamesSortFilter.DeveloperAscending">Developer (Ascending)</MudSelectItem>
                <MudSelectItem Value="GamesSortFilter.DeveloperDescending">Developer (Descending)</MudSelectItem>
            </MudSelect>

    </MudContainer>
</MudContainer>
    <MudGrid Spacing="4" Class="d-flex flex-row">
        @foreach (var game in GetGames())
        {
            <MudItem xs="12" md="6" lg="3" xl="2">
                <MudPaper Elevation="5" @onclick="() => NavigateToGameDetaied(game.Id)" Class="pa-4 d-flex flex-column justify-space-between" style="height:100%; background-color: var(--mud-palette-tertiary); cursor:pointer;">
                    <div>
                        <MudImage class="w-100" Style="" Src="@game.Thumbnail"></MudImage>
                        <MudText Typo="Typo.h6" Color="Color.Secondary" Class="mb-2">@game.Title</MudText>

                        <MudText Typo="Typo.body2" Color="Color.Secondary">@game.Short_Description</MudText>

                    </div>

                    <div class="mt-2 d-flex justify-space-between">
                        <MudChip Style="font-size:12px;" T="string" Color="Color.Secondary">@game.Genre</MudChip>
                        <div style="display:flex; align-items:center; margin:0;" >
                            @foreach (var platform in game.Platform)
                            {
                                <MudIcon Color="Color.Primary" Class="ml-2" Icon="@(platform == "PC (Windows)" ? Icons.Custom.Brands.MicrosoftWindows : @Icons.Custom.Brands.Chrome)"></MudIcon>
                            }
                        </div>
                    </div>
                </MudPaper>

            </MudItem>
        }
    </MudGrid>


</MudContainer>


@code {

    protected async override Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        if(UiState.Value.GamesSimple.Count <= 0){

            dispatcher.Dispatch(new GetGamesSimpleListAction());
        }
    }

    private void NavigateToGameDetaied(int id)
    {
        NavigationManager.NavigateTo($"/game-details/{id}");
    }
    
    private void OnSearchChanged(string? value)
    {        
        Console.WriteLine("1");
        dispatcher.Dispatch(new OnSearchWordChangedAction(value));

    }

    private void OnGenreSelected(string genre)
    {
        dispatcher.Dispatch(new OnSelectedGenreChangedAction(genre));
    }

    private void OnFilterGamesChanged(GamesSortFilter filter)
    {
        dispatcher.Dispatch(new SetGameFilterAction(filter));
    }

    private List<GameSimpleDisplayModel> GetGames()
    {
        switch (UiState.Value.SortGamesBy)
        {
            case Data.Misc.GamesSortFilter.TitleAscending:
                return UiState.Value.FilteredGamesSimple.OrderBy(x => x.Title).ToList();

            case Data.Misc.GamesSortFilter.TitleDescending:
                return UiState.Value.FilteredGamesSimple.OrderByDescending(x => x.Title).ToList();

            case Data.Misc.GamesSortFilter.PublisherAscending:
                return UiState.Value.FilteredGamesSimple.OrderBy(x => x.Publisher).ToList();

            case Data.Misc.GamesSortFilter.PublisherDescending:
                return UiState.Value.FilteredGamesSimple.OrderByDescending(x => x.Publisher).ToList();

            case Data.Misc.GamesSortFilter.DeveloperAscending:
                return UiState.Value.FilteredGamesSimple.OrderBy(x => x.Developer).ToList();

            case Data.Misc.GamesSortFilter.DeveloperDescending:
                return UiState.Value.FilteredGamesSimple.OrderByDescending(x => x.Developer).ToList();

            default: return new List<GameSimpleDisplayModel>();

        }
    }
}
